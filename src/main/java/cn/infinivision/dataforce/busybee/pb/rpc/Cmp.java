// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

package cn.infinivision.dataforce.busybee.pb.rpc;

/**
 * <pre>
 * Cmp cmp operation
 * </pre>
 *
 * Protobuf enum {@code rpcpb.Cmp}
 */
public enum Cmp
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>Exists = 0;</code>
   */
  Exists(0),
  /**
   * <code>NotExists = 1;</code>
   */
  NotExists(1),
  /**
   * <code>Equal = 2;</code>
   */
  Equal(2),
  /**
   * <code>NotEqual = 3;</code>
   */
  NotEqual(3),
  /**
   * <code>GE = 4;</code>
   */
  GE(4),
  /**
   * <code>GT = 5;</code>
   */
  GT(5),
  /**
   * <code>LE = 6;</code>
   */
  LE(6),
  /**
   * <code>LT = 7;</code>
   */
  LT(7),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>Exists = 0;</code>
   */
  public static final int Exists_VALUE = 0;
  /**
   * <code>NotExists = 1;</code>
   */
  public static final int NotExists_VALUE = 1;
  /**
   * <code>Equal = 2;</code>
   */
  public static final int Equal_VALUE = 2;
  /**
   * <code>NotEqual = 3;</code>
   */
  public static final int NotEqual_VALUE = 3;
  /**
   * <code>GE = 4;</code>
   */
  public static final int GE_VALUE = 4;
  /**
   * <code>GT = 5;</code>
   */
  public static final int GT_VALUE = 5;
  /**
   * <code>LE = 6;</code>
   */
  public static final int LE_VALUE = 6;
  /**
   * <code>LT = 7;</code>
   */
  public static final int LT_VALUE = 7;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Cmp valueOf(int value) {
    return forNumber(value);
  }

  public static Cmp forNumber(int value) {
    switch (value) {
      case 0: return Exists;
      case 1: return NotExists;
      case 2: return Equal;
      case 3: return NotEqual;
      case 4: return GE;
      case 5: return GT;
      case 6: return LE;
      case 7: return LT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Cmp>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Cmp> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Cmp>() {
          public Cmp findValueByNumber(int number) {
            return Cmp.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return cn.infinivision.dataforce.busybee.pb.rpc.PB.getDescriptor().getEnumTypes().get(1);
  }

  private static final Cmp[] VALUES = values();

  public static Cmp valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Cmp(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:rpcpb.Cmp)
}

