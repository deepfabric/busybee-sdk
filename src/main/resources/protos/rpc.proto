syntax = "proto3";

package rpcpb;

import "meta.proto";

option java_multiple_files = true;
option java_package = "cn.infinivision.dataforce.busybee.pb.rpc";
option java_outer_classname = "PB";
option objc_class_prefix = "HLW";


enum Type {
    Set           = 0;
    Get           = 1;
    Delete        = 2;
    Scan          = 3;
    SetIf         = 4;
    DeleteIf      = 5;

    BMCreate      = 100;
    BMAdd         = 101;
    BMRemove      = 102;
    BMClear       = 103;
    BMContains    = 104;
    BMCount       = 105;
    BMRange       = 106;

    StartingInstance         = 200;
    LastInstance             = 201;
    HistoryInstance          = 202;
    UpdateWorkflow           = 203;
    UpdateCrowd              = 204;
    StartedInstance          = 205;
    StopInstance             = 206;
    StoppedInstance          = 207;
    CreateInstanceStateShard = 208;
    UpdateInstanceStateShard = 209;
    RemoveInstanceStateShard = 210;
    InstanceCountState       = 211;
    InstanceCrowdState       = 212;

    QueueAdd              = 300;
    QueueFetch            = 301;
    QueueJoin             = 302;

    TenantInit    = 400;
    UpdateMapping = 401;
    GetMapping    = 402;
    UpdateProfile = 403;
    GetProfile    = 404;
    AddEvent      = 405;
    FetchNotify   = 406;
    ScanMapping   = 407;
    GetIDSet      = 408;

    AllocID       = 501;
    ResetID       = 502;
}

// Event is process definition
message Event {
    uint64 userID     = 1;
    uint64 tenantID   = 2;
    uint64 workflowID = 3;
    repeated KV data  = 4;
}

// KV custom KV data
message KV {
    bytes key   = 1;
    bytes value = 2;
}

// Notify notify message
message Notify {
    uint64 userID     = 1;
    bytes  crowd      = 2;
    uint64 tenantID   = 3;
    uint64 workflowID = 4;
    string fromStep   = 5;
    string fromAction = 6;
    string toStep     = 7;
    string toAction   = 8;
}

// Request the busybee request
message Request {
    uint64                       id              = 1  ;
    Type                         type            = 2;
    SetRequest                   set             = 3;
    GetRequest                   get             = 4  ;
    DeleteRequest                delete          = 5  ;
    ScanRequest                  scan            = 6  ;
    BMCreateRequest              bmCreate        = 7  ;
    BMAddRequest                 bmAdd           = 8  ;
    BMRemoveRequest              bmRemove        = 9  ;
    BMClearRequest               bmClear         = 10  ;
    BMRangeRequest               bmRange         = 11 ;
    BMCountRequest               bmCount         = 12 ;
    BMContainsRequest            bmContains      = 13 ;
    TenantInitRequest            tenantInit      = 14 ;
    StartingInstanceRequest      startInstance   = 15 ;
    LastInstanceRequest          lastInstance    = 16 ;
    HistoryInstanceRequest       historyInstance = 17 ;
    UpdateCrowdRequest           updateCrowd     = 18 ;
    UpdateWorkflowRequest        updateWorkflow  = 19 ;
    StopInstanceRequest          stopInstance    = 20 ;
    InstanceCountStateRequest    countInstance   = 21 ;
    InstanceCrowdStateRequest    crowdInstance   = 22 ;
    UpdateMappingRequest         updateMapping   = 23 ;
    GetMappingRequest            getMapping      = 24 ;
    UpdateProfileRequest         updateProfile   = 25 ;
    GetProfileRequest            getProfile      = 26 ;
    AddEventRequest              addEvent        = 27 ;
    QueueJoinGroupRequest        queueJoin       = 28 ;
    QueueFetchRequest            queueFetch      = 29 ;
    AllocIDRequest               allocID         = 30 ;
    ResetIDRequest               resetID         = 31 ;
    ScanMappingRequest           scanMapping     = 32 ;
    GetIDSetRequest              getIDSet        = 33 ;
    SetIfRequest                 setIf           = 34 ;
    DeleteIfRequest              deleteIf        = 35 ;
}

// Response the busybee response
message Response {
    uint64                        id              = 1;
    Type                          type            = 2;
    ErrorResponse                 error           = 3  ;
    BytesResponse                 bytesResp       = 4  ;
    BoolResponse                  boolResp        = 5  ;
    Uint64Response                uint64Resp      = 6  ;
    Uint32Response                uint32Resp      = 7  ;
    Uint32RangeResponse           uint32RangeResp = 8  ;
    Uint32SliceResponse           uint32SliceResp = 9  ;
    BytesSliceResponse            bytesSliceResp  = 10 ;
    StringResponse                stringResp      = 11 ;
    QueueJoinGroupResponse        joinResp        = 12;
    QueueFetchResponse            fetchResp       = 13;
}

// ConditionGroup condition groups
message ConditionGroup {
    repeated Condition conditions = 1;
}


// SetRequest set a key value pair
message SetRequest {
    bytes  key   = 1;
    bytes  value = 2;
    int64  ttl   = 3;
}

// SetIfRequest set with condition
message SetIfRequest {
    bytes     key                       = 1;
    bytes     value                     = 2;
    int64     ttl                       = 3;
    repeated  ConditionGroup conditions = 4;
}

// DeleteIfRequest delete with condition
message DeleteIfRequest {
    bytes     key                       = 1;
    repeated  ConditionGroup conditions = 2;
}



// GetRequest get value by key
message GetRequest {
    bytes key = 1;
}

// DeleteRequest remove a key value pair
message DeleteRequest {
    bytes key = 1;
}

// BMCreateRequest create a bitmap
message BMCreateRequest {
    bytes           key   = 1;
    repeated uint64 value = 2;
}

// BMAddRequest add some uint64 to a bitmap
message BMAddRequest {
    bytes           key   = 1;
    repeated uint64 value = 2;
}

// BMRemoveRequest remove some uint64 from a bitmap
message BMRemoveRequest {
    bytes           key   = 1;
    repeated uint64 value = 2;
}

// BMClearRequest clear a bitmap
message BMClearRequest {
    bytes           key   = 1;
}

// BMContainsRequest check some uint64 is in a bitmap
message BMContainsRequest {
    bytes           key   = 1;
    repeated uint64 value = 2;
}

// BMCountRequest returns the count of a bitmap
message BMCountRequest {
    bytes key = 1;
}

// BMRangeRequest returns the limit uint64s that that >= start of a bitmap
message BMRangeRequest {
    bytes           key   = 1;
    uint64          start = 2;
    uint64          limit = 3;
}

// StartingInstanceRequest start a workflow instance
message StartingInstanceRequest {
    metapb.WorkflowInstance instance  = 1;
}

// LastInstanceRequest last instance request
message LastInstanceRequest {
    uint64 workflowID = 1;
}

// HistoryInstanceRequest history instance request
message HistoryInstanceRequest {
    uint64 workflowID = 1;
    uint64 instanceID = 2;
}

// UpdateCrowdRequest update crowd request
message UpdateCrowdRequest {
    uint64 id              = 1;
    metapb.BMLoader loader = 2;
    bytes  loaderMeta      = 3;
}

// UpdateWorkflowRequest update instance request
message  UpdateWorkflowRequest {
    metapb.Workflow workflow  = 1;
}

// StartedInstanceRequest remove a workflow
message StartedInstanceRequest {
    uint64 workflowID = 1;
}

// StopInstanceRequest remove a workflow
message StopInstanceRequest {
    uint64 workflowID = 1;
}

// StoppedInstanceRequest workflow stopped
message StoppedInstanceRequest {
    uint64 workflowID = 1;
}

// CreateInstanceStateShardRequest create a instance state
message CreateInstanceStateShardRequest {
    metapb.WorkflowInstanceWorkerState state = 1;
}

// UpdateInstanceStateShardRequest update a instance state
message UpdateInstanceStateShardRequest {
    metapb.WorkflowInstanceWorkerState state = 1;
}

// RemoveInstanceStateShardRequest remove a instance state
message RemoveInstanceStateShardRequest {
    uint64 workflowID = 1;
    uint32 index      = 2;
}

// InstanceCountStateRequest instance count state
message InstanceCountStateRequest {
    uint64 workflowID = 1;
}

// InstanceCrowdStateRequest instance crowd state
message InstanceCrowdStateRequest {
    uint64 workflowID = 1;
    string name       = 2;
}

// QueueAddRequest add items into a queue
message QueueAddRequest {
    bytes          key            = 1;
    repeated bytes items          = 2;
    repeated bytes kvs            = 3;
    Condition      condition      = 4;
    bool           allocPartition = 5;
}

// Cmp cmp operation
enum Cmp {
    Exists    = 0;
    NotExists = 1;
    Equal     = 2;
    NotEqual  = 3;
    GE        = 4;
    GT        = 5;
    LE        = 6;
    LT        = 7;
}

// Condition condition
message Condition {
    bytes key   = 1;
    Cmp   cmp   = 2;
    bytes value = 3;
}


// QueueJoinGroupRequest join a group
message QueueJoinGroupRequest {
    uint64 id    = 1;
    bytes  key   = 2;
    bytes  group = 3;
}

// QueueJoinGroupResponse queue join group response
message QueueJoinGroupResponse {
    uint32          index      = 1;
    repeated uint32 partitions = 2;
    repeated uint64 versions   = 3;
}

// QueueFetchRequest fetch items from a queue
message QueueFetchRequest {
    uint64 id              = 1;
    bytes  key             = 2;
    bytes  group           = 3;
    uint32 partition       = 4;
    uint32 consumer        = 5;
    uint64 version         = 6;
    uint64 completedOffset = 7;
    uint64 count           = 8;
}

// QueueFetchResponse fetch response
message QueueFetchResponse {
    bool            removed    = 1;
    repeated bytes  items      = 2;
    uint64          lastOffset = 3;
}

// TenantInitRequest init tenant
message TenantInitRequest {
    metapb.Tenant metadata = 1;
}

// ScanMappingRequest scan tenant all mappinged id values
message ScanMappingRequest {
    uint64 id    = 1;
    uint64 from  = 2;
    uint64 to    = 3;
    uint64 limit = 4;
}

// GetIDSet get id set
message GetIDSetRequest {
    uint64 id     = 1;
    uint64 userID = 2;
}

// UpdateMappingRequest update id mapping request
message UpdateMappingRequest {
    uint64       id     = 1;
    uint64       userID = 2;
    metapb.IDSet set    = 3;
}

// GetMappingRequest get id mapping request
message GetMappingRequest {
    uint64           id   = 1;
    metapb.IDValue   from = 2;
    string           to   = 3;
}

// UpdateProfileRequest update profile request
message UpdateProfileRequest {
    uint64 id     = 1;
    uint64 userID = 2;
    bytes  value  = 3;
}

// GetProfileRequest get profile request
message GetProfileRequest {
    uint64 id     = 1;
    uint64 userID = 2;
    string field  = 3;
}

// AddEventRequest add event
message AddEventRequest {
    metapb.UserEvent event = 1;
}

// AllocIDRequest alloc id request
message AllocIDRequest {
    bytes  key   = 1;
    uint64 batch = 2;
}

// ResetIDRequest reset alloc id request
message ResetIDRequest {
    bytes  key       = 1;
    uint64 startWith = 2;
}

// ScanRequest scan request
message ScanRequest {
    bytes  start       = 1;
    bytes  end         = 2;
    uint64 limit       = 3;
    metapb.Group group = 4;
}

// ErrorResponse error response
message ErrorResponse {
    string error = 1;
}

// EmptyResponse empty response
message EmptyResponse {

}

// StringResponse response
message StringResponse {
    string value = 1;
}

// BytesResponse response
message BytesResponse {
    bytes value = 1;
}

// BoolResponse response
message BoolResponse {
    bool  value = 1;
}

// Uint64Response response
message Uint64Response {
    uint64 value = 1;
}

// Uint32SliceResponse response
message Uint32SliceResponse {
    repeated uint64 values = 1;
}

// BytesSliceResponse response
message BytesSliceResponse {
    repeated bytes keys       = 1;
    repeated bytes values    = 2;
    uint64         lastValue      = 3;
}

// Uint32Response uint32 response
message Uint32Response {
    uint64 value = 1;
}

// Uint32RangeResponse uint32 range response
message Uint32RangeResponse {
    uint64 from = 1;
    uint64 to   = 2;
}